// build a map of the dependency artifacts to use. Allows centralized definition
// of the version of artifacts to use.  In that respect it serves a role similar
// to <dependencyManagement> in Maven

ext {
  versions = [
  
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Gradle plugins version
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Latest version -> https://sourceforge.net/projects/checkstyle/files/checkstyle
    checkstyle_version : '8.14',
    // Latest version -> https://plugins.gradle.org/plugin/com.github.kt3k.coveralls
    coveralls_version : '2.8.2',
    // Latest version -> http://www.eclemma.org/jacoco
    jacoco_version : '0.8.2',
    // Latest version -> https://plugins.gradle.org/plugin/nebula.integtest
    nebula_project_version : '5.1.2',
    // Latest version -> https://plugins.gradle.org/plugin/io.codearte.nexus-staging
    nexus_staging_version : '0.12.0',
    // Latest version -> https://pmd.github.io
    pmd_version : '6.9.0',
    // Latest version -> https://plugins.gradle.org/plugin/com.diffplug.gradle.spotless
    spotless_version : '3.15.0',
    // Latest version -> https://plugins.gradle.org/plugin/io.spring.dependency-management
    dependency_management_version : '1.0.6.RELEASE',
    
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Java libraries version
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    // Main
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Latest version -> https://mvnrepository.com/artifact/commons-cli/commons-cli
    commons_cli_version : '1.4',
    // Latest version -> https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload
    commons_fileupload_version : '1.3.3',
    // Latest version -> https://mvnrepository.com/artifact/commons-io/commons-io
    commons_io_version : '2.6',
    // Latest version -> https://mvnrepository.com/artifact/org.libreoffice
    libre_office_version : '5.4.2',
    // Latest version -> https://mvnrepository.com/artifact/org.openoffice
    open_office_version : '4.1.2',
    // Latest version -> https://mvnrepository.com/artifact/org.springframework.boot/spring-boot
    spring_boot_version : '2.0.6.RELEASE',
    
    // Test
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Latest version -> https://mvnrepository.com/artifact/nl.jqno.equalsverifier/equalsverifier
    equalsverifier_version : '3.0',
    // Latest version -> https://mvnrepository.com/artifact/com.google.code.findbugs/findbugs
    findbugs_version : '3.0.1',
    // Latest version -> https://mvnrepository.com/artifact/org.mockito/mockito-core
    // 2.9.0 is the latest version compatible powermock version 1.7.3 so we must
    // override the version provided by spring boot (see gradle/java-projects.gradle).
    // See https://stackoverflow.com/questions/47240116/mockito-and-powermockito-error
    mockito_version : '2.9.0',
    // mockito_version : '2.13.1',
    // Latest version -> https://mvnrepository.com/artifact/org.powermock/powermock-api-mockito
    powermock_version : '1.7.4',
    // Latest version -> https://mvnrepository.com/artifact/com.github.tomakehurst/wiremock
    wiremock_version : '2.19.0'
  ]

  gradlePlugins = [
    
    coveralls                          : "org.kt3k.gradle.plugin:coveralls-gradle-plugin:$versions.coveralls_version",
    dependency_management              : "io.spring.gradle:dependency-management-plugin:$versions.dependency_management_version",
    nebula_project                     : "com.netflix.nebula:nebula-project-plugin:$versions.nebula_project_version",
    nexus_staging                      : "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:$versions.nexus_staging_version",
    spotless                           : "com.diffplug.spotless:spotless-plugin-gradle:$versions.spotless_version"
  ]
  
  libraries = [

    // Apache Commons Libraries
    commons_cli                        : "commons-cli:commons-cli:$versions.commons_cli_version",
    commons_fileupload                 : "commons-fileupload:commons-fileupload:$versions.commons_fileupload_version",
    commons_io                         : "commons-io:commons-io:$versions.commons_io_version",
    commons_lang3                      : "org.apache.commons:commons-lang3",

    // Spring Boot libraries
    spring_boot_dependencies           : "org.springframework.boot:spring-boot-dependencies:$versions.spring_boot_version",
    spring_boot_starter                : 'org.springframework.boot:spring-boot-starter',
    spring_boot_configuration_processor: 'org.springframework.boot:spring-boot-configuration-processor',
    spring_boot_starter_test           : 'org.springframework.boot:spring-boot-starter-test',
    
    // Spring Libraries
    spring_core                        : "org.springframework:spring-core",
    spring_context                     : "org.springframework:spring-context",
    spring_test                        : "org.springframework:spring-test",
    spring_context                     : "org.springframework:spring-context",

    // HTTP Components libraries
    httpcomponents_httpcore            : "org.apache.httpcomponents:httpcore",
    httpcomponents_httpclient          : "org.apache.httpcomponents:httpclient",
    httpcomponents_httpmime            : "org.apache.httpcomponents:httpmime",
    httpcomponents_fluenthc            : "org.apache.httpcomponents:fluent-hc",

    // Logging Libraries
    slf4j_api                          : "org.slf4j:slf4j-api",
    slf4j_log4j                        : "org.slf4j:slf4j-log4j12",

    // Other Libraries
    gson                               : "com.google.code.gson:gson",
    servlet_api                        : "javax.servlet:javax.servlet-api",

    // Tests
    assertj                            : "org.assertj:assertj-core",
    equalsverifier                     : "nl.jqno.equalsverifier:equalsverifier:$versions.equalsverifier_version",
    junit                              : "junit:junit",
    jsr305                             : "com.google.code.findbugs:jsr305:$versions.findbugs_version",
    findbugs                           : "com.google.code.findbugs:findbugs:$versions.findbugs_version",
    mockito                            : "org.mockito:mockito-core",
    powermock_junit                    : "org.powermock:powermock-module-junit4:$versions.powermock_version",
    powermock_mockito                  : "org.powermock:powermock-api-mockito2:$versions.powermock_version",
    // We now have to use the wiremock standalone version since jetty dependency is provided by spring boot
    //wiremock                           : "com.github.tomakehurst:wiremock:$versions.wiremock_version"
    wiremock                           : "com.github.tomakehurst:wiremock-standalone:$versions.wiremock_version"
  ]
}